% Calculate and plot errors generated by Dave Keenan's convertible-guitar
% concept
clear; close all;

nFrets = 1; % set number of frets desired, if more than 1 octave

%%% DON'T CHANGE THIS, SHOULD BE 154
baseDivision = 154; % location of pins/slots

% trgEd2 = [152 153 155 156]; % the ed2 bridge position approximations

%   with 152: [8 19 38 76]      (max error: +1.3414)
%   with 153: [3 9 17 51]       (max error: +0.6707)
%   with 154: [2 7 11 14 22 77] (no error)
%   with 155: [5 31]            (max error: -0.6707)
%   with 156: [2 4 6 12 26 39 78 155] (max error: -1.3412)

%%% adjust bridge-adjusted ed2 here: 
adjustedDivision = 159;

subsetOptions = divisors(adjustedDivision);
subsetOptions = subsetOptions(2:end-1);
maxErr = 0;

k=0;

for subsetIdx = 1:length(subsetOptions)
    targetSubset = subsetOptions(subsetIdx);
    if targetSubset < 5 || targetSubset == adjustedDivision/2
        continue
    end
    k=k+1;
    if mod(adjustedDivision, targetSubset) ~= 0
        error(['Error: Target ' num2str(targetSubset) '-ed2 fretting must be an equal divisor of the adjusted base, ' num2str(adjustedDivision) '-ed2'])
    end

    nthFret = adjustedDivision/targetSubset; % Fret every nth slot/peg to achieve target EDO approximation

    %%
    scaleLenSource = 648;  % standard long-scale length is 648 mm

    if nFrets < adjustedDivision
        nFrets = adjustedDivision;
    end

    fretPositionSource = calc_fret_positions(baseDivision, scaleLenSource, nFrets);

    %%
    % now we move the bridge to a distance twice that of the EDth fret
    % from the nut
    scaleLenTarget = 2*(scaleLenSource - fretPositionSource(adjustedDivision));   % distance from nut to new position of bridge
    scaleLenDelta = scaleLenSource - scaleLenTarget;            % how far it moved

    % frets distance from bridge if the guitar were designed for the target ed2
    fretPosTarget = calc_fret_positions(adjustedDivision, scaleLenTarget, nFrets);
    % and where they actually are
    fretPosHack = fretPositionSource - scaleLenDelta;

    % convert to positions relative to nut instead of bridge
    % fretPos12_nut = scaleLenSource - fretPosSrc;
    % fretPosNew_nut = scaleLenTarget - fretPosTarget;

    %%
    % error in millimeters between correct fret position and hack
    errLinear = fretPosTarget - fretPosHack;
    % errLinear_nut = fretPos12_nut-fretPosNew_nut;
    centsErr = cents(fretPosHack./fretPosTarget);

    %%
    fig(k) = figure(k);
    ax(k) = axes(fig(k));
    % yyaxis left;
    plot(ax(k), 0:nthFret:nFrets, [0;centsErr(nthFret:nthFret:end)],'o:');

    title(['Error of ' num2str(targetSubset) '-ed2 on a Keenan Convertible guitar (' num2str(adjustedDivision) '-ed2 bridge position)']);
    xlabel('Fret Number');
    ylabel('Error (cents)');
    
    if max(abs(centsErr)) == 0
        ylim([-0.1 0.1])
    else
        ylim([min(centsErr) max(centsErr)]);
    end
    
    xlim([0 nFrets]);
    
    % yyaxis right;
    % plot(0:nFrets, [0;errLinear],'x:');
    % ylabel('Error (millimeters)');
    % ylimVal(2) = ceil(max(abs(errLinear)));
    % if ylimVal(2) == 0
    %     ylimVal(2) = 1;
    % end
    % ylim([-ylimVal(2) ylimVal(2)]);

    ax(k).XTick = 0:nthFret:nFrets;
    ax(k).XTickLabelRotation = 60;
    ax(k).XMinorTick = 'on';
    ax(k).XMinorGrid = 'on';
    ax(k).YMinorTick = 'on';
    ax(k).YMinorGrid = 'on';
    ax(k).XGrid = 'on';

    %%
    edNewCents = edo(adjustedDivision);
    if length(centsErr) > adjustedDivision
        edNewCents = [edNewCents;edNewCents(1:length(centsErr)-adjustedDivision)+1200];
    end

    edHackCents = edNewCents + centsErr;

    fn = ['keenanConvertible' num2str(baseDivision) 'to' num2str(adjustedDivision) '_' num2str(targetSubset) '.scl'];

    descrip = ['Intervals along one string of a Keenan Convertible Guitar with the bridge in the ' num2str(adjustedDivision) '-ed2 position and fretted for ' num2str(targetSubset) '-ed2.'];

    sclFileCents(edHackCents, fn, descrip);
    
    [absErr,maxIdx] = max(abs(centsErr));
    if absErr > abs(maxErr)
        maxErr = absErr * sign(centsErr(maxIdx));
    end
end

% maxErr